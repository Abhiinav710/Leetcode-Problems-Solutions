class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();
        int fresh=0;
        
        queue<pair<int,int>>q;
        
        for(int i=0; i<m;i++)
            for(int j=0; j<n; j++){
               if(grid[i][j]==1) fresh++;
                if(grid[i][j]==2) q.push({i,j}); 
                }
        
        int ans=-1;
        while(!q.empty()){
            int sz= q.size();
            
            for(int i=0; i<sz; i++){
                
               auto f= q.front();
                q.pop();
                int p=f.first;
                int r=f.second;
                
                
                if(p+1<m && grid[p+1][r]==1){
                    grid[p+1][r] = 2;
                    fresh--;
                    q.push({p+1,r});
                }
                if(p-1>=0 && grid[p-1][r]==1){
                    grid[p-1][r] = 2;
                     fresh--;
                    q.push({p-1,r});
                }
                if(r+1<n && grid[p][r+1]==1){
                    grid[p][r+1] = 2;
                     fresh--;
                    q.push({p,r+1});
                }
                if(r-1>=0 && grid[p][r-1]==1){
                    grid[p][r-1] = 2;
                     fresh--;
                    q.push({p,r-1});
                }
                
                    
            }
            ans++;
            
        }
        
        if(fresh>0) return -1;
        
        else return ans==-1?0:ans;
        
    }
};

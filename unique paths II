class Solution {
    public int uniquePathsWithObstacles(int[][] obs) {
           int m=obs.length;
           int n=obs[0].length;
           int dp[][]=new int[m][n];
           for(int i=0;i<m;i++){
               for(int j=0;j<n;j++){
                   if(i==0 && j==0 && obs[i][j]==0) dp[0][0]= 1;
                   else if(obs[i][j]==1) dp[i][j]= 0;
                   else{
                       int x=0,y=0;
                        if(i>0) x=dp[i-1][j];
                        if(j>0) y=dp[i][j-1];
                         dp[i][j]=x+y;
                   }
               }
           }
        return dp[m-1][n-1];
    }
    //   public int helper(int i,int j,int m,int n,int[][] dp,int[][] obs){
    //     if(i==m-1 && j==n-1 && obs[i][j]==0) return 1;
    //     if(i>=m || j>=n) return 0;
    //        if(obs[i][j]==1) return 0;
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     int x=helper(i+1,j,m,n,dp,obs);
    //     int y=helper(i,j+1,m,n,dp,obs);
    //     return dp[i][j]=x+y;
    // }
}

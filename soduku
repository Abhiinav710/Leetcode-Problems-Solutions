class Solution {
    public void solveSudoku(char[][] board) {
        
        helper(board,board.length,0,0);
    }
    public boolean helper(char[][] board,int n,int i,int j){
         if(i==9) return true;
        if(j==9) return helper(board,n,i+1,0);
       if(board[i][j]!='.') return helper(board,n,i,j+1);
        for(char p='1';p<='9';p++){
                 if(isSafe(i,j,board,p,n)==true){
                     board[i][j]=p;
                     if(helper(board,n,i,j+1)==true) return true; 
                     board[i][j]='.';
                 }
        }
        return false;
    }
    public boolean isSafe(int i,int j,char[][] board,char p,int n){
         int row = i - i%3, column = j - j%3;
        for(int t=0;t<n;t++) {if(board[t][j]==p) return false; }
         for(int t=0;t<n;t++){ if(board[i][t]==p) return false; }
         for(int x=0; x<3; x++)
         for(int y=0; y<3; y++)
        if(board[row+x][column+y] ==p) return false;
        return true;
    }
}

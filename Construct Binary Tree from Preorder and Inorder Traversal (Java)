/*Problem statement
Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
*/

//solution
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    HashMap<Integer, Integer> map= new HashMap<>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }
        return solve(preorder, inorder, 0,preorder.length-1, 0,inorder.length-1);
    }
    TreeNode solve(int[] pre, int[] in, int ps, int pl, int is, int il){
        if(ps>pl||is>il)
            return null;
        int ind= map.get(pre[ps]);
       TreeNode root = new TreeNode(pre[ps]);
        
        root.left=solve(pre,in,ps+1,ps+ind-is,is,ind-1);
        root.right=solve(pre, in, ps+ind-is+1, pl,ind+1,il);
        return root;
    }
    
}
